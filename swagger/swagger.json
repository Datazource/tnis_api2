{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/account_deposit/": {
            "get": {
                "tags": [
                    "account_deposit"
                ],
                "description": "get AccountDeposit",
                "operationId": "AccountDepositController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountDeposit"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "account_deposit"
                ],
                "description": "create AccountDeposit",
                "operationId": "AccountDepositController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AccountDeposit content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AccountDeposit"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.AccountDeposit"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/account_deposit/{id}": {
            "get": {
                "tags": [
                    "account_deposit"
                ],
                "description": "get AccountDeposit by id",
                "operationId": "AccountDepositController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountDeposit"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "account_deposit"
                ],
                "description": "update the AccountDeposit",
                "operationId": "AccountDepositController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AccountDeposit content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AccountDeposit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountDeposit"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "account_deposit"
                ],
                "description": "delete the AccountDeposit",
                "operationId": "AccountDepositController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/account_saving/": {
            "get": {
                "tags": [
                    "account_saving"
                ],
                "description": "get AccountSaving",
                "operationId": "AccountSavingController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountSaving"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "account_saving"
                ],
                "description": "create AccountSaving",
                "operationId": "AccountSavingController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AccountSaving content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AccountSaving"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.AccountSaving"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/account_saving/{id}": {
            "get": {
                "tags": [
                    "account_saving"
                ],
                "description": "get AccountSaving by id",
                "operationId": "AccountSavingController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountSaving"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "account_saving"
                ],
                "description": "update the AccountSaving",
                "operationId": "AccountSavingController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AccountSaving content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AccountSaving"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountSaving"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "account_saving"
                ],
                "description": "delete the AccountSaving",
                "operationId": "AccountSavingController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/account_saving_history/": {
            "get": {
                "tags": [
                    "account_saving_history"
                ],
                "description": "get AccountSavingHistory",
                "operationId": "AccountSavingHistoryController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountSavingHistory"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "account_saving_history"
                ],
                "description": "create AccountSavingHistory",
                "operationId": "AccountSavingHistoryController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AccountSavingHistory content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AccountSavingHistory"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.AccountSavingHistory"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/account_saving_history/{id}": {
            "get": {
                "tags": [
                    "account_saving_history"
                ],
                "description": "get AccountSavingHistory by id",
                "operationId": "AccountSavingHistoryController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountSavingHistory"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "account_saving_history"
                ],
                "description": "update the AccountSavingHistory",
                "operationId": "AccountSavingHistoryController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for AccountSavingHistory content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AccountSavingHistory"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.AccountSavingHistory"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "account_saving_history"
                ],
                "description": "delete the AccountSavingHistory",
                "operationId": "AccountSavingHistoryController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/customer/": {
            "get": {
                "tags": [
                    "customer"
                ],
                "description": "get Customer",
                "operationId": "CustomerController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "customer"
                ],
                "description": "create Customer",
                "operationId": "CustomerController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Customer content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Customer"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/customer/{id}": {
            "get": {
                "tags": [
                    "customer"
                ],
                "description": "get Customer by id",
                "operationId": "CustomerController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "customer"
                ],
                "description": "update the Customer",
                "operationId": "CustomerController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Customer content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "customer"
                ],
                "description": "delete the Customer",
                "operationId": "CustomerController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/customer_account/": {
            "get": {
                "tags": [
                    "customer_account"
                ],
                "description": "get CustomerAccount",
                "operationId": "CustomerAccountController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.CustomerAccount"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "customer_account"
                ],
                "description": "create CustomerAccount",
                "operationId": "CustomerAccountController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for CustomerAccount content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CustomerAccount"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.CustomerAccount"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/customer_account/{id}": {
            "get": {
                "tags": [
                    "customer_account"
                ],
                "description": "get CustomerAccount by id",
                "operationId": "CustomerAccountController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.CustomerAccount"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "customer_account"
                ],
                "description": "update the CustomerAccount",
                "operationId": "CustomerAccountController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for CustomerAccount content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CustomerAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.CustomerAccount"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "customer_account"
                ],
                "description": "delete the CustomerAccount",
                "operationId": "CustomerAccountController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "get Users",
                "operationId": "UsersController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {}
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "description": "create Users",
                "operationId": "UsersController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Users content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Users"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "users"
                ],
                "description": "Logs user into the system",
                "operationId": "UsersController.Login",
                "parameters": [
                    {
                        "in": "query",
                        "name": "email",
                        "description": "The email for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "password",
                        "description": "The password for login",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} login success"
                    },
                    "403": {
                        "description": "user not exist"
                    }
                }
            }
        },
        "/users/logout": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "Logs out current logged in user session",
                "operationId": "UsersController.logout",
                "responses": {
                    "200": {
                        "description": "{string} logout success"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "get Users by id",
                "operationId": "UsersController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "description": "update the Users",
                "operationId": "UsersController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Users content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "description": "delete the Users",
                "operationId": "UsersController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AccountDeposit": {
            "title": "AccountDeposit",
            "type": "object",
            "properties": {
                "AccountSavingId": {
                    "$ref": "#/definitions/models.AccountSaving"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Money": {
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.AccountSaving": {
            "title": "AccountSaving",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Descriptions": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.AccountSavingHistory": {
            "title": "AccountSavingHistory",
            "type": "object",
            "properties": {
                "AccountDepositId": {
                    "$ref": "#/definitions/models.AccountDeposit"
                },
                "BankOfficerId": {
                    "$ref": "#/definitions/models.Users"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Money": {
                    "type": "integer",
                    "format": "int64"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "models.Customer": {
            "title": "Customer",
            "type": "object",
            "properties": {
                "Address": {
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Email": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "Nik": {
                    "type": "string"
                },
                "Phone": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.CustomerAccount": {
            "title": "CustomerAccount",
            "type": "object",
            "properties": {
                "AccountSavingId": {
                    "$ref": "#/definitions/models.AccountSaving"
                },
                "Active": {
                    "type": "integer",
                    "format": "int32"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "CustomerId": {
                    "$ref": "#/definitions/models.Customer"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.Users": {
            "title": "Users",
            "type": "object",
            "properties": {
                "Active": {
                    "type": "integer",
                    "format": "int32"
                },
                "Address": {
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Email": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "Nik": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "Phone": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "account_deposit",
            "description": "AccountDepositController operations for AccountDeposit\n"
        },
        {
            "name": "account_saving",
            "description": "AccountSavingController operations for AccountSaving\n"
        },
        {
            "name": "account_saving_history",
            "description": "AccountSavingHistoryController operations for AccountSavingHistory\n"
        },
        {
            "name": "customer",
            "description": "CustomerController operations for Customer\n"
        },
        {
            "name": "customer_account",
            "description": "CustomerAccountController operations for CustomerAccount\n"
        },
        {
            "name": "users",
            "description": "UsersController operations for Users\n"
        }
    ]
}